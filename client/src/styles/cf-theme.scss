
// Custom Theming for Angular Material
@import '~@angular/material/theming';
@import './variables.scss';

$btn-text-color: rgba(map-get($md-cfaccent, 500), 0.84);
  
@include mat-core(); // Mixin for the base package

$client-primary: mat-palette($md-cfprimary);
$client-accent: mat-palette($md-cfaccent);
$client-warn: mat-palette($mat-red);
// Create the theme object (a scss map containing all of the palettes).
$client-theme: mat-light-theme($client-primary, $client-accent, $client-warn);

// Applies a property to an mat-button element for each of the supported palettes.

@mixin _mat-button-theme-property($theme, $property, $hue, $opacity: 1) {
  $primary: map-get($theme, primary);
  $accent: map-get($theme, accent);
  $warn: map-get($theme, warn);
  $background: map-get($theme, background);
  $foreground: map-get($theme, foreground);

  &.mat-primary {
    #{$property}: mat-color($primary, $hue, $opacity);
  }
  &.mat-accent {
    #{$property}: mat-color($accent, $hue, $opacity);
  }
  &.mat-warn {
    #{$property}: mat-color($warn, $hue, $opacity);
  }

  &.mat-primary, &.mat-accent, &.mat-warn, &[disabled] {
    &[disabled] {
      $palette: if($property == 'color', $foreground, $background);
      #{$property}: mat-color($palette, disabled-button);
    }
  }
}

@mixin mat-button-theme($theme) {
  $primary: map-get($theme, primary);
  $accent: map-get($theme, accent);
  $warn: map-get($theme, warn);
  $background: map-get($theme, background);
  $foreground: map-get($theme, foreground);

  .mat-icon-button {
    color: $btn-text-color;
    background: transparent;

    @include _mat-button-theme-property($theme, 'color', default);
    @include _mat-button-focus-overlay-color($theme);

    .mat-ripple-element {
      opacity: $_mat-button-ripple-opacity;
      background-color: currentColor;
    }
  }

  .mat-button {
    color: $btn-text-color;
    background: transparent;

    @include _mat-button-theme-property($theme, 'color', default);

    .mat-button-focus-overlay {
      background-color: transparent;
    }

    .mat-ripple-element {
      opacity: $_mat-button-ripple-opacity;
      background-color: currentColor;
    }
  }

  .mat-button:hover,
  .mat-button:active {
    text-decoration: underline;
  }

  .mat-stroked-button {
    color: $btn-text-color;
    background: transparent;
    outline-color: map-get($md-cfgray, 500);
    
    @include _mat-button-theme-property($theme, 'color', default);
    @include _mat-button-focus-overlay-color($theme);

    .mat-button-focus-overlay {
      background-color: transparent;
    }

    .mat-ripple-element {
      opacity: $_mat-button-ripple-opacity;
      background-color: currentColor;
    }
  }

  .mat-stroked-button:hover,
  .mat-stroked-button:active {
    color: map-get($md-cfprimary, 500);
    @include _mat-button-theme-property($theme, 'color', default);
  }

  .mat-button-focus-overlay {
    background: map_get($foreground, base);
  }

  .mat-stroked-button:not([disabled]) {
    border-color: rgba(map-get($md-cfprimary, 500), .2);
  }

  .mat-raised-button {
    color: $btn-text-color;
    background-color: mat-color($background, raised-button);

    @include _mat-button-theme-property($theme, 'color', default-contrast, 0.84);
    @include _mat-button-theme-property($theme, 'background-color', default);
    @include _mat-button-ripple-color($theme, default-contrast);
  }

  .mat-flat-button, .mat-fab, .mat-mini-fab {
    color: $btn-text-color;
    background-color: mat-color($background, raised-button);

    @include _mat-button-theme-property($theme, 'color', default-contrast);
    @include _mat-button-theme-property($theme, 'background-color', default);
    @include _mat-button-ripple-color($theme, default-contrast);
  }

  .mat-stroked-button, .mat-flat-button {
    @include _mat-theme-overridable-elevation(0, $theme);
  }

  .mat-raised-button {
    @include _mat-theme-overridable-elevation(2, $theme);

    &:not([disabled]):active {
      @include _mat-theme-overridable-elevation(8, $theme);
    }

    &[disabled] {
      @include _mat-theme-overridable-elevation(0, $theme);
    }
  }

  .mat-fab, .mat-mini-fab {
    @include _mat-theme-overridable-elevation(6, $theme);

    &:not([disabled]):active {
      @include _mat-theme-overridable-elevation(12, $theme);
    }

    &[disabled] {
      @include _mat-theme-overridable-elevation(0, $theme);
    }
  }

  .mat-raised-button,
  .mat-flat-button {
    &:not([disabled]):hover,
    &:not([disabled]):active {
      .mat-button-focus-overlay {
        opacity: 0.2;
      }
    }
  }
}

@mixin mat-form-field-standard-theme($theme) {
  $foreground: map-get($theme, foreground);
  $is-dark-theme: map-get($theme, is-dark);

  $underline-color: mat-color($foreground, divider, if($is-dark-theme, 0.7, 0.42));

  .mat-form-field-appearance-standard {
    &.search {
      color: $btn-text-color;
      .mat-form-field-wrapper {
        padding: 4px 20px;
        .mat-form-field-flex {
          padding-top: 0;
          display: flex;
          align-items: center;
          .mat-form-field-infix {
            border-top: none;
            label {
              color: rgba(map-get($md-cfaccent, 500), 0.44);
            }
          }
        }
        .mat-form-field-suffix {
          color: rgba(map-get($md-cfaccent, 500), .34);
        }
      }
      .mat-form-field-underline {
        display: none;
      }
    }
    .mat-form-field-underline {
      background-color: $underline-color;
    }

    &.mat-form-field-disabled .mat-form-field-underline {
      @include mat-control-disabled-underline($underline-color);
    }
  }
}

@mixin mat-form-field-legacy-theme($theme) {
  $foreground: map-get($theme, foreground);
  $is-dark-theme: map-get($theme, is-dark);

  $label-color: mat-color($foreground, secondary-text);
  $underline-color: mat-color($foreground, divider, if($is-dark-theme, 0.7, 0.42));

  .mat-form-field-appearance-legacy {
    color: $btn-text-color;
    .mat-form-field-wrapper {
      padding-bottom: 0;
      .mat-form-field-infix {
        label {
          color: rgba(map-get($md-cfaccent, 500), 0.44);
        }
      }
    }
    .mat-form-field-label {
      color: $label-color;
    }

    .mat-hint {
      color: $label-color;
    }

    .mat-form-field-underline {
      background-color: $underline-color;
      display: none;
    }

    &.mat-form-field-disabled .mat-form-field-underline {
      @include mat-control-disabled-underline($underline-color);
    }
  }
}

@mixin mat-form-field-fill-theme($theme) {
  $foreground: map-get($theme, foreground);
  $is-dark-theme: map-get($theme, is-dark);

  $fill-background: mat-color($foreground, base, if($is-dark-theme, 0.1, 0.04));
  $fill-disabled-background: mat-color($foreground, base, if($is-dark-theme, 0.05, 0.02));
  $underline-color: mat-color($foreground, divider, if($is-dark-theme, 0.5, 0.42));
  $label-disabled-color: mat-color($foreground, disabled-text);
  
  .mat-form-field-appearance-fill {
    color: $btn-text-color;
    &.mat-focused {
      .mat-form-field-wrapper {
        .mat-form-field-flex {
          background-color: transparent;
        }
      }
    }
    &.bg-transparent {
      .mat-form-field-wrapper {
        .mat-form-field-flex {
          background-color: transparent;
          display: flex;
          align-items: center;
        }
      }
    }
    .mat-form-field-wrapper {
      padding-bottom: 0;
      .mat-form-field-flex {
        background-color: $mat-form-bg-color;
        border-radius: 0;
      }
      .mat-form-field-prefix {
        margin-right: 15px;
        color: rgba($mat-form-prefix-color, 0.3);
      }
      .mat-form-field-infix {
        label {
          color: rgba(map-get($md-cfaccent, 500), 0.44);
        }
        input {
          height: 25px;
        }
      }
      .mat-form-field-suffix {
        color: map-get($md-cdgreen, 500);
        .weak {
          color: map-get($md-cfred, 500);
        }
        .medium {
          color: map-get($md-cfyellow, 500);
        }
        .error-field {
          color: map-get($md-cfyellow, 500);
        }
      }
    }

    &.mat-form-field-disabled .mat-form-field-flex {
      background-color: $fill-disabled-background;
    }

    .mat-form-field-underline {
      display: none;
    }
  
    .mat-form-field-underline::before {
      background-color: $underline-color;
    }

    &.mat-form-field-disabled {
      .mat-form-field-label {
        color: $label-disabled-color;
      }

      .mat-form-field-underline::before {
        background-color: transparent;
      }
    }
  }
}

@mixin mat-select-theme($theme) {
  $foreground: map-get($theme, foreground);
  $background: map-get($theme, background);
  $primary: map-get($theme, primary);
  $accent: map-get($theme, accent);
  $warn: map-get($theme, warn);

  .mat-select-value {
    color: $btn-text-color;
  }

  .mat-select-placeholder {
    color: _mat-control-placeholder-color($theme);
  }

  .mat-select-disabled .mat-select-value {
    color: mat-color($foreground, disabled-text);
  }

  .mat-select-arrow {
    color: mat-color($foreground, secondary-text);
  }

  .mat-select-panel {
    background: mat-color($background, card);
    @include _mat-theme-overridable-elevation(4, $theme);

    .mat-option.mat-selected:not(.mat-option-multiple) {
      background: mat-color($background, hover, 0.12);
    }
  }

  .mat-form-field {
    &.mat-focused {
      &.mat-primary .mat-select-arrow {
        color: mat-color($primary);
      }

      &.mat-accent .mat-select-arrow {
        color: mat-color($accent);
      }

      &.mat-warn .mat-select-arrow {
        color: mat-color($warn);
      }
    }

    .mat-select.mat-select-invalid .mat-select-arrow {
      color: mat-color($warn);
    }

    .mat-select.mat-select-disabled .mat-select-arrow {
      color: mat-color($foreground, disabled-text);
    }
  }
}


@include angular-material-theme($client-theme);


@import url('https://fonts.googleapis.com/css?family=Poppins|Roboto&display=swap');
@import url('//fonts.googleapis.com/icon?family=Material+Icons');

html, body { height: 100%; }
body { margin: 0; font-family: 'Roboto', sans-serif; }

/*
  Text Styles
*/
h1, h2, h3, h4 {
  font-family: 'Poppins-Bold', sans-serif;
  color: map-get($md-cfaccent, 500);
}
h5, h6 {
  font-family: 'Poppins', sans-serif;
  color: map-get($md-cfaccent, 500);
}
p {
  font-family: 'Roboto', sans-serif;
  color: map-get($md-cfaccent, 400);
}

action-button {
  & > button {
    border-radius: 500px !important;
    padding: 10px 40px !important;
  }
  &.link-btn {
    & > button {
      border-radius: 0 !important;
      border: none !important;
      padding: 0 !important;
    }
  }
  &.nav-btn {
    & > button {
      max-width: 170px;
      padding: 10px 0 !important;
    }
  }
  &.update-btn {
    margin-top: 30px;
    min-width: 150px;
  }
}

.container {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  grid-gap: 15px;
  padding: 0 60px;
  width: 100%;
  max-width: $container-max-width;
  box-sizing: border-box;
}

mat-dialog-container {
  position: relative;
  width: 100vw !important;
  border-radius: 20px !important;
  max-width: 880px !important;
  min-width: 310px !important;
  dialog-content {
    width: 100%;
    @include flex(column, center, flex-start);
    mat-icon.cancel {
      position: absolute;
      top: 10px;
      right: 10px;
      color: map-get($md-cfprimary, 500);
    }
  }
}
