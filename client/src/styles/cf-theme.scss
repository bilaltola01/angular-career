
// Custom Theming for Angular Material
@import '~@angular/material/theming';
@import './variables.scss';
  
@include mat-core(); // Mixin for the base package

$client-primary: mat-palette($md-cfprimary);
$client-accent: mat-palette($md-cfaccent);
$client-warn: mat-palette($mat-red);
// Create the theme object (a scss map containing all of the palettes).
$client-theme: mat-light-theme($client-primary, $client-accent, $client-warn);

@include angular-material-theme($client-theme);

// Applies a property to an mat-button element for each of the supported palettes.

@mixin _mat-button-theme-property($theme, $property, $hue) {
    $primary: map-get($theme, primary);
    $accent: map-get($theme, accent);
    $warn: map-get($theme, warn);
    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);
  
    &.mat-primary {
      #{$property}: mat-color($primary, $hue, .84);
    }
    &.mat-accent {
      #{$property}: mat-color($accent, $hue, .84);
    }
    &.mat-warn {
      #{$property}: mat-color($warn, $hue, .84);
    }
  
    &.mat-primary, &.mat-accent, &.mat-warn, &[disabled] {
      &[disabled] {
        $palette: if($property == 'color', $foreground, $background);
        #{$property}: mat-color($palette, disabled-button);
      }
    }
}

@mixin mat-button-theme($theme) {
    $primary: map-get($theme, primary);
    $accent: map-get($theme, accent);
    $warn: map-get($theme, warn);
    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    .mat-button, .mat-icon-button, .mat-stroked-button {
        // Buttons without a background color should inherit the font color. This is necessary to
        // ensure that the button is readable on custom background colors. It's wrong to always assume
        // that those buttons are always placed inside of containers with the default background
        // color of the theme (e.g. themed toolbars).
        color: inherit;
        background: transparent;

        @include _mat-button-theme-property($theme, 'color', default);
        @include _mat-button-focus-overlay-color($theme);

        // Setup the ripple color to be based on the text color. This ensures that the ripples
        // are matching with the current theme palette and are in contrast to the background color
        // (e.g in themed toolbars).
        .mat-ripple-element {
        opacity: $_mat-button-ripple-opacity;
        background-color: currentColor;
        }
    }

    .mat-button-focus-overlay {
        background: map_get($foreground, base);
    }

    // Note: this needs a bit extra specificity, because we're not guaranteed the inclusion
    // order of the theme styles and the button reset may end up resetting this as well.
    .mat-stroked-button:not([disabled]) {
        border-color: mat-color($foreground, divider);
    }

    .mat-flat-button, .mat-raised-button, .mat-fab, .mat-mini-fab {
        // Default font and background color when not using any color palette.
        color: mat-color($foreground, text);
        background-color: mat-color($background, raised-button);

        @include _mat-button-theme-property($theme, 'color', default-contrast);
        @include _mat-button-theme-property($theme, 'background-color', default);
        @include _mat-button-ripple-color($theme, default-contrast);
    }

    .mat-stroked-button, .mat-flat-button {
        @include _mat-theme-overridable-elevation(0, $theme);
    }

    .mat-raised-button {
        @include _mat-theme-overridable-elevation(2, $theme);

        &:not([disabled]):active {
        @include _mat-theme-overridable-elevation(8, $theme);
        }

        &[disabled] {
        @include _mat-theme-overridable-elevation(0, $theme);
        }
    }

    .mat-fab, .mat-mini-fab {
        @include _mat-theme-overridable-elevation(6, $theme);

        &:not([disabled]):active {
        @include _mat-theme-overridable-elevation(12, $theme);
        }

        &[disabled] {
        @include _mat-theme-overridable-elevation(0, $theme);
        }
    }

    .mat-raised-button {
        &:hover,
        &:active {
            .mat-button-focus-overlay {
                opacity: 0.2;
            }
        }
    }

    // .mat-secondary {
    //     color: $btn-secondary-text-color;
    //     outline-color: $btn-secodary-outline-color !important;
    //     &:hover,
    //     &:active {
    //         color: mat-color($primary);
    //     }
    // }

    // .mat-teritory {
    //     padding: 0 !important;
    //     color: mat-color($primary);
    //     &:hover,
    //     &:active {
    //         text-decoration: underline;
    //         .mat-button-focus-overlay {
    //             opacity: 0 !important;
    //         }
    //     }
    // }
}

@include mat-button-theme($client-theme);


@import url('https://fonts.googleapis.com/css?family=Poppins|Roboto&display=swap');
@import url('//fonts.googleapis.com/icon?family=Material+Icons');

html, body { height: 100%; }
body { margin: 0; font-family: 'Roboto', sans-serif; }

/*
    Text Styles
*/
h1, h2, h3, h4 {
    font-family: 'Poppins-Bold', sans-serif;
    color: map-get($md-cfaccent, 500);
}
h5, h6 {
    font-family: 'Poppins', sans-serif;
    color: map-get($md-cfaccent, 500);
}
p {
    font-family: 'Roboto', sans-serif;
    color: map-get($md-cfaccent, 400);
}

button {
    border-radius: 500px !important;
    padding: 10px 40px !important;
}

/*
    Material Overwrites
*/
.mat-form-field-appearance-fill .mat-form-field-flex {
    border: 1px solid map-get($md-cfgray, 500);
}
.mat-form-field-prefix {
    margin-right: 10px;
}
.mat-form-field-appearance-fill .mat-form-field-flex {
    background-color: rgba(0, 0, 0, 0.01);
}
